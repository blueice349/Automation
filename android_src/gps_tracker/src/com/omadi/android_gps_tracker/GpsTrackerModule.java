/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.omadi.android_gps_tracker;

import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.widget.Toast;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollFunction;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.content.Intent;

@Kroll.module(name="GpsTracker", id="com.omadi.android_gps_tracker")
public class GpsTrackerModule extends KrollModule
{

    //private static final long MINIMUM_DISTANCE_CHANGE_FOR_UPDATES = 1; // in Meters
    //private static final long MINIMUM_TIME_BETWEEN_UPDATES = 1000; // in Milliseconds
	private double longitude;
	private double latitude;

    protected LocationManager locationManager;

	// Standard Debugging variables
	private static final String LCAT = "GpsTrackerModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public GpsTrackerModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	public void onLocationChanged(Location loc)
	{
		latitude = loc.getLatitude();
		longitude = loc.getLongitude();
	}

	/*
	private class MyLocationListener implements LocationListener {


	}
	*/
	// Methods

	// Properties
	@Kroll.getProperty
	public double[] getCoordinates()
	{
		Log.d(LCAT, "Got coordinates !");
		double[] coord;

		coord = new double[2];
		coord[0] = latitude;
		coord[1] = longitude;

		return coord;
	}

	
	@Kroll.setProperty
	public void setStartGPS(long MINIMUM_DISTANCE_CHANGE_FOR_UPDATES, long MINIMUM_TIME_BETWEEN_UPDATES) {
		//Log.d(LCAT, "set example property: " + value);
		/* the location manager is the most vital part it allows access 
		 * to location and GPS status services */
        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        
        locationManager.requestLocationUpdates(
                LocationManager.GPS_PROVIDER, 
                MINIMUM_TIME_BETWEEN_UPDATES, 
                MINIMUM_DISTANCE_CHANGE_FOR_UPDATES, 
                this
        );

        latitude = 0;
        longitude = 0;
	}

	/*

	@Override
	protected void onResume() {
		
		 // onResume is is always called after onStart, even if the app hasn't been
		 // paused
		 // 
		 // add location listener and request updates every 1000ms or 10m
		 
		lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000, 10f, this);
		super.onResume();
	}
	
	@Override
	protected void onPause() {
		// GPS, as it turns out, consumes battery like crazy 
		lm.removeUpdates(this);
		super.onPause();
	}


	@Override
	protected void onStop() {
		// may as well just finish since saving the state is not important for this toy app 
		finish();
		super.onStop();
	}
	*/

}

